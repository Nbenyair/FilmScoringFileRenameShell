#!/bin/bash
# Film Scoring File Rename Shell Script
known_instrs=(click clk vl vln violin vla viola vc cello cb contrabass fl flute pic ob oboe eh cl clarinet bcl bassclarinet bsn bassoon fh frenchhorn horns tpt trumpet tbn trombone btbn basstrombone tb tuba cimbasso cim timp timpani sn snare cym cymbal bd bassdrum gc grancasa xyl xylophone mrb marimba glk glockenspiel glock vib vibraphone tbls tubularbells hprc handpercussion sprc specialtypercussion pno piano clst celeste epno electricpiano org organ hrp harp svx solovoice ch choir pad synthpad arp arpeggio egt electricguitar agt acousticguitar kit drumkit kd kickdrum hh hihat tom toms loop drumloop ebs electricbass sbs synthbass ub uprightbass final reference mixminus rough riser sfx mixbus "mix bus")


# Section mapping (abbreviation) with pattern matching
section_map() {
  case "$1" in
    # Woodwinds (section names)
    *ww*|*winds*|*woodwinds*) echo "WW" ;;
    # Brass (section names)
    *brs*|*brass*) echo "BRS" ;;
    # Woodwinds (instruments)
    pic*|piccolo*|fl*|flute*|afl*|altoflute*|ob*|oboe*|eh*|englishhorn*|cl*|clarinet*|bcl*|bassclarinet*|bsn*|bassoon*) echo "WW" ;;
    # Brass (instruments)
    fh*|frenchhorn*|horns*|tpt*|trumpet*|tbn*|trombone*|btbn*|basstrombone*|tb*|tuba*|cimb*|cimbasso*|cim*) echo "BRS" ;;
    # Percussion
    timp*|timpani*|sn*|snare*|cym*|cymbals*|bd*|bassdrum*|bass\ drum*|gc*|grancasa*|gran\ casa*|xyl*|xylophone*|mrb*|marimba*|glk*|glock*|glockenspiel*|vib*|vibraphone*|tbls*|tubularbells*|tubular\ bells*|hprc*|handpercussion*|hand\ percussion*|sprc*|specialtypercussion*|specialty\ percussion*) echo "PRC" ;;
    # Keyboards & Harp
    pno*|piano*|clst*|celeste*|epno*|electricpiano*|org*|organ*|hrp*|harp*) echo "KBHRP" ;;
    # Strings
    vl*|vln*|violin*|vla*|viola*|vc*|cello*|cb*|contrabass*|ub*|uprightbass*) echo "STR" ;;
    # Voices
    svx*|solovoice*|ch*|choir*) echo "VOX" ;;
    # Synth
    syn*|synth*|pad*|synthpad*|arp*|arpeggio*) echo "SYN" ;;
    # Guitar
    egt*|electricguitar*|agt*|acousticguitar*) echo "GUIT" ;;
    # Drums
    kit*|drumkit*|kd*|kickdrum*|hh*|hihat*|tom*|toms*|loop*|drumloop*) echo "DRUM" ;;
    # Bass (non-orchestral)
    ebs*|electricbass*|sbs*|synthbass*|cb/ub*|contrabass*|uprightbass*) echo "BASS" ;;
    # Mixes
    final*|finalmix*|reference*|referencemix*|mixminus*|mixminus*|rough*|roughmix*|mixbus*|mix\ bus*) echo "MIX" ;;
    # SFX
    riser*|sfx*) echo "SFX" ;;
    # Other
    oth*|other*) echo "OTH" ;;
    *) echo "OTH" ;;
  esac
}



# Instrument abbreviation (short name) with pattern matching
instrument_abbrev() {
  case "$1" in
    # Woodwinds (section names) -- handled by fallback logic
    # Brass (section names) -- handled by fallback logic
    # Woodwinds (instruments)
    pic*|piccolo*) echo "pic" ;;
    fl*|flute*) echo "fl" ;;
    afl*|altoflute*|alto\ flute*) echo "afl" ;;
    ob*|oboe*) echo "ob" ;;
    eh*|englishhorn*|english\ horn*|coranglais*|cor\ anglais*) echo "eh" ;;
    cl*|clarinet*) echo "cl" ;;
    bcl*|bassclarinet*|bass\ clarinet*) echo "bcl" ;;
    bsn*|bassoon*|fagott*) echo "bsn" ;;
    # Brass (instruments)
    fh*|frenchhorn*|french\ horn*|horns*|horn*) echo "fh" ;;
    tpt*|trumpet*) echo "tpt" ;;
    tbn*|trombone*) echo "tbn" ;;
    btbn*|basstrombone*|bass\ trombone*) echo "btbn" ;;
    cimb*|cimbasso*|cim*) echo "cim" ;;
    tb*|tuba*) echo "tb" ;;
    # Percussion
    timp*|timpani*) echo "timp" ;;
    sn*|snare*) echo "sn" ;;
    cym*|cymbals*|cymbal*) echo "cym" ;;
    bd*|bassdrum*|bass\ drum*|gc*|grancasa*|gran\ casa*) echo "bd" ;;
    xyl*|xylophone*) echo "xyl" ;;
    mrb*|marimba*) echo "mrb" ;;
    glk*|glock*|glockenspiel*) echo "glk" ;;
    vib*|vibraphone*) echo "vib" ;;
    bell*|bells*) echo "bell" ;;
    tbls*|tubularbells*|tubular\ bells*) echo "tbls" ;;
    hprc*|handpercussion*|hand\ percussion*) echo "hprc" ;;
    sprc*|specialtypercussion*|specialty\ percussion*) echo "sprc" ;;
    # Keyboards & Harp
    pno*|piano*) echo "pno" ;;
    clst*|celeste*) echo "clst" ;;
    epno*|electricpiano*|electric\ piano*) echo "epno" ;;
    org*|organ*) echo "org" ;;
    hrp*|harp*) echo "hrp" ;;
    # Strings
    vl*|vln*|violin*) echo "vln" ;;
    vla*|viola*) echo "vla" ;;
    vc*|cello*) echo "vc" ;;
    cb*|contrabass*|ub*|uprightbass*|upright\ bass*) echo "cb" ;;
    str*|strings*) echo "str" ;;
    # Voices
    svx*|solovoice*|voice*|vocal*) echo "svx" ;;
    ch*|choir*) echo "ch" ;;
    # Synth
    syn*|synth*|pad*|synthpad*|synth\ pad*) echo "pad" ;;
    arp*|arpeggio*) echo "arp" ;;
    # Guitar
    egt*|electricguitar*|electric\ guitar*) echo "egt" ;;
    agt*|acousticguitar*|acoustic\ guitar*) echo "agt" ;;
    # Drums
    kit*|drumkit*|drumset*|drum\ set*) echo "kit" ;;
    kd*|kickdrum*|kick\ drum*) echo "kd" ;;
    hh*|hihat*|hi\ hat*) echo "hh" ;;
    tom*|toms*|tom\ tom*) echo "tom" ;;
    loop*|drumloop*|drum\ loop*) echo "loop" ;;
    # Bass (non-orchestral)
    ebs*|electricbass*|electric\ bass*) echo "ebs" ;;
    sbs*|synthbass*|synth\ bass*) echo "sbs" ;;
    # SFX
    riser*) echo "riser" ;;
    sfx*) echo "sfx" ;;
    # Mixes
    final*|finalmix*|reference*|referencemix*|mixminus*|mixminus*|rough*|roughmix*|mixbus*|mix\ bus*) echo "$1" ;;
    # Other
    oth*|other*) echo "OTH" ;;
    *) echo "$1" ;;
  esac
}


# Create log file with timestamp in the same directory as the first file
timestamp=$(date +"%Y%m%d_%H%M%S")
first_file_dir=""
if [[ $# -gt 0 ]]; then
  first_file_dir=$(dirname "$1")
fi
logfile="${first_file_dir}/FilmScoring_Rename_Log_${timestamp}.txt"
echo "Film Scoring File Rename Log - $(date)" > "$logfile"
echo "========================================" >> "$logfile"
echo "" >> "$logfile"

for f in "$@"; do
  # Get filename and extension
  filename=$(basename "$f")
  dir=$(dirname "$f")
  ext="${filename##*.}"
  name="${filename%.*}"

  # Only process audio files (case-insensitive, portable)
  ext_lc=$(echo "$ext" | tr '[:upper:]' '[:lower:]')
  case "$ext_lc" in
    wav|aiff|mp3) ;;
    *) echo "Skipping non-audio file: $filename"; continue ;;
  esac

  # Check for _TBR or _TBL at the end (case-insensitive)
  tbr_tbl=""
  name_no_tbr_tbl="$name"
  if [[ "$name" =~ (.*)_([Tt][Bb][Rr]|[Tt][Bb][Ll])$ ]]; then
    name_no_tbr_tbl="${BASH_REMATCH[1]}"
    tbr_tbl="_${BASH_REMATCH[2]^^}"
  fi

  # Split name into cueID and instrument (expects format: cueID_instrument[_TBR|_TBL].ext)
  cueID="${name_no_tbr_tbl%%_*}"
  instrument="${name_no_tbr_tbl#*_}"

  # If name doesn't contain exactly one underscore, skip
  if [[ "$name_no_tbr_tbl" == "$cueID" ]] || [[ "$cueID" == "$instrument" ]]; then
    echo "Skipping invalid file name: $filename"
    continue
  fi

  # Normalize instrument for mapping: lowercase, remove special chars except numbers and spaces, then remove spaces for matching
  instrument_lc=$(echo "$instrument" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//')
  instrument_lc_nospace=$(echo "$instrument_lc" | tr -d ' ')

  # Effect names: if instrument contains effect keywords, set SEC to 'ยง' and keep original instrument name
  if [[ "$instrument_lc" =~ (delay|dly|reverb|rev([^a-zA-Z]|$)|verb|chorus|cho|flanger|flg|phaser|phs|distortion|dst|overdrive|od|compressor|cmp|limiter|lim|eq|equalizer|filter|flt|wah|tremolo|trm|vibrato|vib|autopan|pan|fx|fxs|fx1|fx2|fx3|fx4|fx5) ]]; then
    section="ยง"
    orig_instr_nospaces=$(echo "$instrument" | tr -d ' ')
    base_newname="${cueID}_${section}_${orig_instr_nospaces}${tbr_tbl}"
  elif [[ "$instrument_lc" =~ synth ]]; then
    section="SYN"
    orig_instr_nospaces=$(echo "$instrument" | tr -d ' ')
    base_newname="${cueID}_${section}_${orig_instr_nospaces}${tbr_tbl}"
  else
    matched_prefix=""
    matched_prefix_nospace=""
    matched_len=0
    for prefix in "${known_instrs[@]}"; do
      prefix_nospace=$(echo "$prefix" | tr -d ' ')
      prefix_len=${#prefix_nospace}
      if [[ $prefix_len -eq 0 ]]; then
        continue
      fi
      if [[ "${instrument_lc_nospace:0:prefix_len}" == "$prefix_nospace" ]]; then
        if (( prefix_len > matched_len )); then
          matched_prefix="$prefix"
          matched_prefix_nospace="$prefix_nospace"
          matched_len=$prefix_len
        fi
      fi
    done

    if [[ -z "$matched_prefix" ]] || [[ $(section_map "$matched_prefix") == "OTH" ]]; then
      # Fallback: check for section keywords anywhere in the instrument name
      if [[ "$instrument_lc" =~ (.*)(brass|brs)(.*) ]]; then
        section="BRS"
        abbr=$(echo "$instrument_lc" | sed 's/brass/brs/;s/brs/brs/' | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${tbr_tbl}"
      elif [[ "$instrument_lc" =~ (.*)(winds|ww|woodwinds)(.*) ]]; then
        section="WW"
        abbr=$(echo "$instrument_lc" | sed 's/winds/ww/;s/woodwinds/ww/;s/ww/ww/' | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${tbr_tbl}"
      elif [[ "$instrument_lc" =~ (.*)(strings|str)(.*) ]]; then
        section="STR"
        abbr=$(echo "$instrument_lc" | sed 's/strings/str/;s/str/str/' | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${tbr_tbl}"
      elif [[ "$instrument_lc" =~ (.*)(percussion|prc|perc)(.*) ]]; then
        section="PRC"
        abbr=$(echo "$instrument_lc" | sed 's/percussion/prc/;s/perc/prc/;s/prc/prc/' | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${tbr_tbl}"
      elif [[ "$instrument_lc" =~ (.*)(mixbus|mix bus)(.*) ]]; then
        section="MIX"
        abbr=$(echo "$instrument_lc" | sed 's/mix bus/mixbus/;s/mixbus/mixbus/' | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${tbr_tbl}"
      else
        # Not covered: SEC is RenameManually!, keep original instrument name (no spaces)
        orig_instr_nospaces=$(echo "$instrument" | tr -d ' ')
        base_newname="${cueID}_RenameManually!_${orig_instr_nospaces}${tbr_tbl}"
      fi
    else
      # Special case: click track gets no section, just CueID_CLK
      if [[ "$matched_prefix" == "click" || "$matched_prefix" == "clk" ]]; then
        base_newname="${cueID}_CLK${tbr_tbl}"
      else
        # Find the suffix in the no-space version, then map it back to the original
        suffix_nospace="${instrument_lc_nospace:$matched_len}"
        # Find the corresponding suffix in the original normalized instrument (with spaces)
        # This is a best-effort: remove the matched prefix (with spaces removed) from the start of the no-space version, then map to the original
        section=$(section_map "$matched_prefix")
        abbr=$(instrument_abbrev "$matched_prefix")
        # Find where the matched prefix ends in the original instrument_lc
        prefix_nospace="$matched_prefix_nospace"
        orig_no_space="$instrument_lc"
        idx=0
        orig_idx=0
        while [[ $idx -lt $matched_len && $orig_idx -lt ${#orig_no_space} ]]; do
          c1=${prefix_nospace:$idx:1}
          c2=${orig_no_space:$orig_idx:1}
          if [[ "$c2" == ' ' ]]; then
            ((orig_idx++))
            continue
          fi
          if [[ "$c1" == "$c2" ]]; then
            ((idx++))
            ((orig_idx++))
          else
            ((orig_idx++))
          fi
        done
        suffix="${orig_no_space:$orig_idx}"
        suffix_nospaces=$(echo "$suffix" | tr -d ' ')
        base_newname="${cueID}_${section}_${abbr}${suffix_nospaces}${tbr_tbl}"
      fi
    fi
  fi

  # Ensure unique filename: if conflict, append original instrument name in parentheses
  newname="$base_newname.$ext"
  if [[ -e "$dir/$newname" ]]; then
    # Remove any spaces and parentheses from the original instrument for safety
    orig_instr_clean=$(echo "$instrument" | sed 's/[()]/_/g')
    newname="${base_newname}(${orig_instr_clean}).$ext"
    uniquecounter=2
    while [[ -e "$dir/$newname" ]]; do
      newname="${base_newname}(${orig_instr_clean}_$uniquecounter).$ext"
      ((uniquecounter++))
    done
  fi

  # Rename file
  mv -n "$f" "$dir/$newname" && {
    echo "Renamed: $filename -> $newname"
    echo "$filename --> $newname" >> "$logfile"
  }
done

echo "" >> "$logfile"
echo "Renaming completed at $(date)" >> "$logfile"
echo "Log file created: $logfile"

# Show a macOS dialog window when done (visible for 5 seconds, then closes)
osascript -e 'display dialog "Renaming complete!\nThank you so much Netta you are a f*cking genius!" with title "Renaming complete!" buttons {"OK"} giving up after 6'